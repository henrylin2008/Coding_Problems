 Bottom up DFS (general steps):
	1.	Base Case
	2.	Get return value from the child nodes (recursion)
	3.	Use the return value from the child node to solve the current problem
	4.	(optional) additional operations
	5.	return answer (for parent problem)

Top Down DFS (steps):
	1.	Base Case
	2.	Do some calculation based off the value returned from the parent node
	3.	(optional) additional operations
	4.	pass down the return value and continue recursion


The template for DFS on tree is:

function dfs(node, state):
    if node is null:
        ...
        return
    left = dfs(node.left, state)
    right = dfs(node.right, state)
        ...
    return ...

Defining the recursive function
Two things we need to decide to define the function:
1. Return value (passing value up from child to parent)
   What do we want to return after visiting a node. For example, for the max depth problem this is the max depth for the
   current node's subtree. If we are looking for a node in the tree, we'd want to return that node if found, else return
   null. Use the return value to pass information from children to parent.

2. Identify state(s) (passing value down from parent to child)
   What states do we need to maintain to compute the return value for the current node. For example, to know if the
   current node's value is larger than its parent we have to maintain the parent's value as a state. State becomes DFS's
   function arguments. Use states to pass information from parent to children.


DFS is better at:
    -uses less memory than BFS for wide graphs, since BFS has to keep all the nodes in the queue, and for wide graphs
     this can be quite large.
    -finding nodes far away from the root, e.g. looking for an exit in a maze.

Similar to BFS, we just have to add visited to keep track of the visited nodes and use get_neighbors to get the next
nodes to visit.
def dfs(root, visited):
    if not root: return

    for neighbor in get_neighbors(root):
        if neighbor in visited:
            continue
        visited.add(neighbor)
        dfs(neighbor, visited)

Complexity: O(|V| + |E|)
We only visit each vertex once in both BFS and DFS with visited. Since technically a graph is made of vertices and
edges, the time complexity of BFS/DFS on graphs is normally expressed as O(|V| + |E|) where |V| stands for number of
vertices and |E| stands for number of edges (V is set of vertices and in math |V| means the size of a set).

