BFS is better for:
    - finding nodes close/closest to the root

We can implement BFS using a queue. Important things to remember:
   -We need at least one element to kick start the process
   -Right after we dequeue an element, we'd want to enqueue its children if there are any


When to use BFS?
    -Shortest path from A to B (unweight)
    -Graph of unknown or even infinite size, e.g. knight shortest path
    -Dijkstra Intro | Shortest Path in a Weighted Graph


BFS on graph Template
The BFS template consists of two core functions
1.bfs: uses a queue to keep track of the nodes to be visited
2.get_neighbors: returns a node's neighbors. In an adjacency list representation, this would be returning the list of
  neighbors for the node. If the problem is about a matrix, this would be the surrounding valid cells as we will see in
  number of islands and knight shortest path. If the graph is implicit, we have to generate the neighbors as we traverse.
  We will see this in word ladder.


# BFS on graph
from collections import deque

def bfs_graph(root):
    queue = deque([root]) # at least one element in the queue to kick start bfs
    visited = set([root])
    while len(queue) > 0: # as long as there is an element in the queue
        node = queue.popleft() # dequeue
        for neighbor in get_neighbors(node):
            if neighbor in visited:
                continue
            queue.append(neighbor)
            visited.add(neighbor)


# BFS on tree
from collections import deque
def bfs_tree(root):
    queue = deque([root])
    while len(queue) > 0:
        node = queue.popleft()
        for child in node.children:
            queue.append(child)
            if neighbor in visited:
                continue
            queue.append(neighbor)
            visited.add(neighbor)


Tracking levels/Finding distance

BFS is by-level traversal. Sometimes we need to track how many levels we have traversed (much like level order traversal
problem in BFS on Tree module).

Similar to binary tree level order traversal, we can get the number of nodes of a level from the queue size.

from collections import deque

def bfs(root):
    queue = deque([root])
    visited = set([root])
    level = 0
    while len(queue) > 0:
        n = len(queue) # get # of nodes in the current level
        for _ in range(n):
            node = queue.popleft()
            for neighbor in get_neighbors(node):
                if neighbor in visited:
                    continue
                queue.append(neighbor)
                visited.add(neighbor)
        # increment level after we have processed all nodes of the level
        level += 1


